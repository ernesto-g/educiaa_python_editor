<?xml version="1.0"?>
<snippets>
    <snippet name="LED Example"><![CDATA[#LED Example
import pyb
led1 = pyb.LED(1)
led1.on()		
#___________]]></snippet>

    <snippet name="Switch Example"><![CDATA[#Switch Example
import pyb
switch1 = pyb.Switch(1)
val = switch1.switch()
print('sw1:'+str(val))		
#___________]]></snippet>

    <snippet name="Switch with callbacks Example"><![CDATA[#Switch with callbacks Example
import pyb
  
def func(sw):
    print("sw pressed!")
    print(sw)

switch1 = pyb.Switch(1)
switch1.callback(func)
while True:
    pyb.delay(1000)		
#___________]]></snippet>

    <snippet name="PIN Example"><![CDATA[#PIN Example
import pyb

p = pyb.Pin(0) #GPIO0
p.init(pyb.Pin.OUT_PP,pyb.Pin.PULL_NONE)
print(p)

while True:
        p.high()
        print("value:"+str(p.value()))
        pyb.delay(1000)
        p.low()
        print("value:"+str(p.value()))
        pyb.delay(1000)		
#___________]]></snippet>

    <snippet name="UART-RS485 Example"><![CDATA[#UART-RS485 Example
import pyb
uart = pyb.UART(3)
uart.init(115200,bits=8, parity=None, stop=1,timeout=1000, timeout_char=1000, read_buf_len=64)
uart.write("Hello world")
while True:
        if uart.any():
                print("data:")
                data = uart.readall()
                print(data)	
#___________]]></snippet>

    <snippet name="PIN Interrupt Example"><![CDATA[#PIN Interrupt Example
import pyb

def callBack(line):
        print("Pin Interrupt!")
        print("Line = ",line)

p = pyb.Pin(8)
p.init(pyb.Pin.OUT_PP,pyb.Pin.PULL_NONE)
print(p)

int = pyb.ExtInt(p,pyb.ExtInt.IRQ_RISING,pyb.Pin.PULL_NONE,callBack)
print(int)

while True:
        pyb.delay(1000)
        print("tick")
#___________]]></snippet>


    <snippet name="DAC Example: sine output"><![CDATA[#DAC Example: sine output
import pyb
import math

dac = pyb.DAC(1)

# sine
buf = bytearray(200) #100 samples. 2 bytes per sample
j=0
for i in range (0,len(buf)/2):
        v = 512 + int(511 * math.sin(2 * math.pi * i / (len(buf)/2) ) )
        buf[j+1] = (v >>  8) & 0xff
        buf[j] = v & 0xff
        j=j+2

# output the sine-wave at 400Hz
print("sine created")

dac.write_timed(buf, 400*(int(len(buf)/2)), mode=pyb.DAC.CIRCULAR)

while True:
        pyb.delay(1000)
#___________]]></snippet>

    <snippet name="Timer Example"><![CDATA[#Timer Example
import pyb

def callb(timer):
      print("Interval interrupt")
      print(timer)

def callbTimeout (timer):
      print("Timeout interrupt")
      print(timer)

print("Test Timers")

t1 = pyb.Timer(1)
t2 = pyb.Timer(2)
t1.interval(2000,callb)
t2.timeout(5000,callbTimeout)

while True:
        pyb.delay(1000)
#___________]]></snippet>

    <snippet name="PWM Example"><![CDATA[#PWM Example
import pyb

pyb.PWM.set_frequency(1000)

out0 = pyb.PWM(0)
out0.duty_cycle(50) # 50%
print("Duty cycle :"+str(out0.duty_cycle()))

out1= pyb.PWM(1)
out1.duty_cycle(25)

out10= pyb.PWM(10)
out10.duty_cycle(75)

while True:
        pyb.delay(1000)
#___________]]></snippet>

    <snippet name="ADC Example"><![CDATA[#ADC Example
import pyb

channel1 = pyb.ADC(1)
channel2 = pyb.ADC(2)
channel3 = pyb.ADC(3)

while True:
        v1 = channel1.read()
        v2 = channel2.read()
        v3 = channel3.read()
        print("value ch1:"+str(v1))
        print("value ch2:"+str(v2))
        print("value ch3:"+str(v3))
        pyb.delay(1000)
#___________]]></snippet>


</snippets>